{"version":3,"sources":["pages/MainPage.jsx","pages/CartPage.jsx","redux/slices/filters.js","components/App.jsx","assets/images/svg/cart.svg","assets/images/svg/logo.svg","components/Header.jsx","components/Button.jsx","redux/slices/cart.js","assets/images/svg/dark-cart.svg","assets/images/svg/trash.svg","components/cart/Cart.jsx","assets/images/png/empty-cart.png","components/cart/EmptyCart.jsx","components/cart/CartItem.jsx","assets/images/svg/arrow-top.svg","components/menus/PopupMenu.jsx","components/menus/CategoriesMenu.jsx","components/menus/SortMenu.jsx","components/pizzas/PizzaGallery.jsx","components/pizzas/Pizza.jsx","redux/store.js","index.js"],"names":["connect","state","productCategories","filters","activeCategory","className","entriesCount","cart","filtersSlice","createSlice","name","initialState","products","isProductsLoaded","productTypes","productSizes","shownProducts","sortOptions","activeSortOption","isShownProductsSorted","reducers","setProducts","action","payload","productsLoaded","setProductTypes","setProductSizes","setProductCategories","setActiveCategory","setShownProducts","setActiveSortOption","sortShownProducts","sort","firstId","secondId","firstProduct","find","product","id","secondProduct","rating","prices","availableTypes","availableSizes","pizzaLabel","localeCompare","actions","dispatch","React","useEffect","fetch","then","response","json","pizzaCategories","pizzaTypes","pizzaSizes","pizzas","exact","path","element","cartEntriesPrice","entriesPrice","cartEntriesCount","to","src","logoSvg","alt","shape","theme","toFixed","cartSvg","Button","onClick","children","classNames","cartSlice","entries","maxEntriesCount","addEntry","enrtyInState","entry","type","size","count","push","price","alert","removeEntry","entryIndex","findIndex","splice","removeAllEntries","entryCount","entryPrice","clearCart","clear","trashSvg","map","EmptyCart","imagePng","CartItem","add","remove","removeAll","imageUrl","label","defaultProps","PopupMenu","inviteText","options","activeOption","setActiveOption","processingFunction","useState","isOpen","setIsOpen","elementRef","useRef","toggleIsOpen","handleOutsideClick","event","includes","current","document","body","addEventListener","removeEventListener","ref","markerSvg","option","index","optionIndex","display","idArray","filter","categories","PropTypes","func","isRequired","items","shown","item","pizzaItem","types","sizes","cartEntries","addToCart","activeType","setActiveType","activeSize","setActiveSize","orderCounter","setOrderCounter","getOrderCount","onSelectType","onSelectSize","store","configureStore","reducer","filtersReducer","cartReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a27ef097.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CategoriesMenu, SortMenu, PizzaGallery } from '../components/';\r\n\r\n\r\n// Component for main page (gallery) representation.\r\n//\r\n// All props comes from Redux storage.\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// productCategories: array of strings, each string represents\r\n//   a product category.\r\n// activeCategory: integer >= 0. Index of productCategories state.\r\n\r\nfunction MainPage({ productCategories, activeCategory }) {\r\n  return (\r\n    <div className='App__wrapper'>\r\n      <div className='interactive-bar App__interactive-bar'>\r\n        <CategoriesMenu />\r\n        <SortMenu />\r\n      </div>\r\n\r\n      <section className='App__gallery-section'>\r\n        <h1 className='App__gallery-section-label section-label'>\r\n          <span className='App__gallery-section-label-category'>\r\n            { productCategories[activeCategory] } \r\n          </span>\r\n          <span> pizzas</span>\r\n        </h1>\r\n\r\n        <PizzaGallery />\r\n\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nMainPage.propTypes = {\r\n  productCategories: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  activeCategory: PropTypes.number.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    productCategories: state.filters.productCategories,\r\n    activeCategory: state.filters.activeCategory,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MainPage);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Cart, EmptyCart } from '../components';\r\n\r\n\r\n// Component for cart page representation.\r\n// If the cart is empty, CartPage will display the EmptyCart component.\r\n// Otherwise, it will be the Cart component.\r\n//\r\n// All props comes from Redux storage (cart slice).\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// entriesCount: integer >= 0 - total count the of shopping cart entries.\r\n//   Need for rendering decision.\r\n\r\nfunction CartPage({ entriesCount }) {\r\n  const content = () => {\r\n    if (entriesCount) {\r\n      return <Cart />;\r\n    } else {\r\n      return (\r\n        <div className='App__empty-cart-wrapper'>\r\n          <EmptyCart />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className='App__wrapper'>\r\n      <section className='App__cart-section'>\r\n        { content() }\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nCartPage.propTypes = {\r\n  entriesCount: PropTypes.number.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    entriesCount: state.cart.entriesCount\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CartPage);","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// State signature:\r\n//\r\n// products: array of pizza objects.\r\n//   Pizza object signature: {\r\n//     id: integer >= 0 - product identificator.\r\n//     imageUrl: string or undefined - path to the product image.\r\n//     pizzaLabel: string - product name.\r\n//     availableTypes: non empty array of integers >= 0 - contain indexes of\r\n//       types state, each index represents the available type\r\n//       for a specific product.\r\n//     availableSizes: non empty array of integers >= 0 - contain indexes of\r\n//       sizes state, each index represents the available size\r\n//       for a specific product.\r\n//     prices: array of arrays of numbers - the matrix of prices for\r\n//       any product configuration (price = prices[type][size]).\r\n//     categories: non empty array of integers >= 0 - contain indexes of\r\n//       categories state, each index represents one of the categories\r\n//       for a specific product.\r\n//     rating: number.\r\n//   }\r\n// isProductsLoaded: boolean - logical flag indicating whether\r\n//   data has been loaded from the server or not.\r\n// productTypes: array of strings, each string represents an available\r\n//   product type.\r\n// productSizes: array of numbers, each number represents an available\r\n//   product size.\r\n// productCategories: array of strings, each string represents\r\n//   a product category.\r\n// activeCategory: integer >= 0. Index of productCategories state.\r\n// shownProducts: array of integers >= 0 - list of products identificators.\r\n//   Only products whose id's are stored in the shownProducts state\r\n//   will be rendered in the gallery.\r\n// sortOptions: array of strings, each string represents\r\n//   an available sort option for products.\r\n// activeSortOption: integer >= 0. Index of sortOptions state.\r\n// isShownProductsSorted: boolean - logical flag indicating whether\r\n//   data has been already sorted or not.\r\n\r\nconst initialState = {\r\n  products: [],\r\n  isProductsLoaded: false,\r\n  productTypes: [],\r\n  productSizes: [],\r\n\r\n  productCategories: ['all'],\r\n  activeCategory: 0,\r\n  shownProducts: [],\r\n\r\n  sortOptions: ['popularity', 'price', 'alphabet'],\r\n  activeSortOption: 0,\r\n  isShownProductsSorted: false,\r\n};\r\n\r\nconst filtersSlice = createSlice({\r\n  name: 'filters',\r\n  initialState,\r\n  reducers: {\r\n\r\n    setProducts(state, action) {\r\n      state.products = action.payload;\r\n    },\r\n\r\n    productsLoaded(state) {\r\n      state.isProductsLoaded = true;\r\n    },\r\n\r\n    setProductTypes(state, action) {\r\n      state.productTypes = action.payload;\r\n    },\r\n\r\n    setProductSizes(state, action) {\r\n      state.productSizes = action.payload;\r\n    },\r\n\r\n    setProductCategories(state, action) {\r\n      state.productCategories = action.payload;\r\n    },\r\n\r\n    setActiveCategory(state, action) {\r\n      state.activeCategory = action.payload;\r\n    },\r\n\r\n    setShownProducts(state, action) {\r\n      state.shownProducts = action.payload;\r\n      state.isShownProductsSorted = false;\r\n    },\r\n\r\n    setActiveSortOption(state, action) {\r\n      state.activeSortOption = action.payload;\r\n      state.isShownProductsSorted = false;\r\n    },\r\n\r\n    sortShownProducts(state) {\r\n      state.shownProducts.sort((firstId, secondId) => {\r\n        const firstProduct = state.products.find(product => {\r\n          return product.id === firstId;\r\n        });\r\n        const secondProduct = state.products.find(product => {\r\n          return product.id === secondId;\r\n        });\r\n\r\n        switch ( state.sortOptions[state.activeSortOption] ) {\r\n          case 'popularity':\r\n            return secondProduct.rating - firstProduct.rating;\r\n          case 'price':\r\n            return (\r\n              firstProduct.prices[firstProduct.availableTypes[0]][firstProduct.availableSizes[0]] -\r\n              secondProduct.prices[secondProduct.availableTypes[0]][secondProduct.availableSizes[0]]\r\n            );\r\n          case 'alphabet':\r\n            return firstProduct.pizzaLabel.localeCompare(\r\n              secondProduct.pizzaLabel\r\n            );\r\n          default:\r\n            return 0;\r\n        }\r\n      });\r\n      state.isShownProductsSorted = true;\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  setProducts,\r\n  setProductTypes,\r\n  setProductSizes,\r\n  productsLoaded,\r\n\r\n  setProductCategories,\r\n  setActiveCategory,\r\n  setShownProducts,\r\n\r\n  setActiveSortOption,\r\n  sortShownProducts,\r\n} = filtersSlice.actions;\r\n\r\nexport default filtersSlice.reducer;","import React from 'react';\n\nimport { Routes, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Header } from './';\nimport { MainPage, CartPage } from '../pages';\n\nimport {\n  setProducts,\n  setProductTypes,\n  setProductSizes,\n  setProductCategories,\n  productsLoaded\n} from '../redux/slices/filters';\n\nimport '../styles/scss/components/App.scss';\n\n\nfunction App({ dispatch }) {\n\n  /* Data loading on mount */\n  React.useEffect(() => {\n    fetch('https://mrdimemes.github.io/react-pizza/db.json')\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch(setProductCategories(json.pizzaCategories));\n        dispatch(setProductTypes(json.pizzaTypes));\n        dispatch(setProductSizes(json.pizzaSizes));\n        dispatch(setProducts(json.pizzas));\n        dispatch(productsLoaded());\n      });\n      // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className='App'>\n      <Header />\n      <Routes>\n        <Route exact path='/react-pizza/' element={ <MainPage /> } />\n        <Route exact path='/react-pizza/cart' element={ <CartPage /> } />\n      </Routes>\n    </div>\n  );\n}\n\nexport default connect()(App);","export default __webpack_public_path__ + \"static/media/cart.aef56ebe.svg\";","export default __webpack_public_path__ + \"static/media/logo.56ac8703.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Routes, Route, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button } from './';\r\n\r\nimport cartSvg from '../assets/images/svg/cart.svg';\r\nimport logoSvg from '../assets/images/svg/logo.svg';\r\n\r\nimport '../styles/scss/components/Header.scss';\r\n\r\n\r\n// Component for page header representation.\r\n// Contain a logo and a Link to the shopping cart in the form of a Button.\r\n// The shopping cart link only appears on the home page.\r\n//\r\n// All props comes from Redux storage (cart slice).\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// cartEntriesPrice: number > 0 - total price of the shopping cart entries\r\n//   (for the shopping cart Button).\r\n// cartEntriesCount: integer >= 0 - total count the of shopping cart entries\r\n//   (for the shopping cart Button).\r\n\r\nfunction Header({ cartEntriesPrice, cartEntriesCount }) {\r\n  return (\r\n    <header className='Header App__header'>\r\n\r\n      <Link to='/react-pizza/'>\r\n        <div className='Header__logo'>\r\n\r\n          <div className='Header__logo-image-container'>\r\n            <img className='image' src={logoSvg} alt='pizza' />\r\n          </div>\r\n\r\n          <div className='Header__logo-text'>\r\n            <h1 className='Header__logo-label'>REACT PIZZA</h1>\r\n            <p className='Header__logo-description'>\r\n              most delicious pizza in the universe\r\n            </p>\r\n          </div>\r\n\r\n        </div>\r\n      </Link>\r\n\r\n\r\n      <Routes>\r\n        <Route exact path='/react-pizza/' element={\r\n          <Link to='/react-pizza/cart'>\r\n\r\n            <Button\r\n              className='Header__cart-button'\r\n              shape='rounded'\r\n              theme='main-colored'\r\n            >\r\n\r\n              <div className='Header__cart-button-cost'>\r\n                { cartEntriesPrice.toFixed(2) + ' $' }\r\n              </div>\r\n\r\n              <div\r\n                className={'Header__cart-button-separator button-separator'}\r\n              />\r\n\r\n              <div className='Header__cart-button-icon-container'>\r\n                <img className='image' src={cartSvg} alt='cart' />\r\n              </div>\r\n\r\n              <div className='Header__cart-button-inputs-counter'>\r\n                { cartEntriesCount }\r\n              </div>\r\n\r\n            </Button>\r\n\r\n          </Link>\r\n        } />\r\n        <Route exact path='/cart' element={ null } />\r\n      </Routes>\r\n\r\n    </header>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  cartEntriesPrice: PropTypes.number.isRequired,\r\n  cartEntriesCount: PropTypes.number.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cartEntriesPrice: state.cart.entriesPrice,\r\n    cartEntriesCount: state.cart.entriesCount\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import PropTypes from 'prop-types';\r\n\r\nimport classNames from 'classnames';\r\n\r\nimport '../styles/scss/components/Button.scss';\r\n\r\n\r\n// Component for rendering html buttons.\r\n// Button can be styled with className, shape and theme props.\r\n//\r\n// Component props:\r\n//\r\n// className: string or undefined - optional css class for the button.\r\n// shape: string or undefined - if not undefined,\r\n//   the css class \"button_shape_<shape>\" will be added to the button.\r\n// theme: string or undefined - if not undefined,\r\n//   the css class \"button_shape_<theme>\" will be added to the button.\r\n// onClick: function for the button event listener.\r\n// children: entries of button,\r\n//   can be writed between <Button> and </Button> tags.\r\n\r\nfunction Button({ className, shape, theme, onClick, children }) {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames(\r\n        'Button',\r\n        className,\r\n        {[`Button_shape_${shape}`]: shape,\r\n        [`Button_theme_${theme}`]: theme}\r\n      )}\r\n    >\r\n      { children }\r\n    </button>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  shape: PropTypes.string,\r\n  theme: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.any\r\n};\r\n\r\nexport default Button;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// State signature:\r\n//\r\n// entries: array of objects.\r\n//   Entry object signature: {\r\n//     id: integer > 0 - product identificator.\r\n//     imageUrl: string or undefined - path to the product image.\r\n//     label: string - product name.\r\n//     type: integer > 0 - index of types array (pizzas Redux slice).\r\n//     size: integer > 0 - index of sizes array store (pizzas Redux slice).\r\n//     price: number > 0 - product price for selected configuration.\r\n//     count: integer > 0 - number of products the with same configuration\r\n//       in the cart.\r\n//   }\r\n// entriesCount: integer >= 0 - total count of the shopping cart entries.\r\n// maxEntriesCount: integer > 1 - maximum count of the shopping cart entries.\r\n//   If entriesCount === maxEntriesCount, new incoming add actions\r\n//   will be ignored. The user will see a pop-up window with information\r\n//   about the restriction.\r\n// entriesPrice: number > 0 - total price of the shopping cart entries.\r\n\r\nconst initialState = {\r\n  entries: [],\r\n  entriesCount: 0,\r\n  maxEntriesCount: 50,\r\n  entriesPrice: 0\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n\r\n\r\n    // Action for add a new entry into the entries state.\r\n    // Action payload must contain the entry object (see signature upper).\r\n    // The count property of the entry object will always be 1.\r\n    // It is optional to specify it in the object.\r\n\r\n    addEntry(state, action) {\r\n      if (state.entriesCount === state.maxEntriesCount) {\r\n        alert(\r\n          'Sorry, you cannot order more than ' +\r\n          state.maxEntriesCount +\r\n          ' pizzas at a time.'\r\n        );\r\n        return ;\r\n      };\r\n      let enrtyInState = false;\r\n\r\n      for (const entry of state.entries) {\r\n        if (\r\n          (entry.id === action.payload.id) && \r\n          (entry.type === action.payload.type) && \r\n          (entry.size === action.payload.size)\r\n        ) {\r\n          entry.count += 1;\r\n          enrtyInState = true;\r\n        }\r\n      }\r\n\r\n      if (!enrtyInState) {\r\n        state.entries.push({\r\n          ...action.payload,\r\n          count: 1\r\n        })\r\n      }\r\n\r\n      state.entriesCount += 1;\r\n      state.entriesPrice += action.payload.price;\r\n    },\r\n\r\n\r\n    // Action for remove the entry from the entries state.\r\n    // Action payload must contain the entry object (see signature upper).\r\n    // The entry object must contain the id, type, size and price properties.\r\n    // Other properties are optional.\r\n    //\r\n    // If there are several identical items with the given configuration\r\n    // in the entries state, then the action will only\r\n    // decrease the count property of such an entry by 1.\r\n\r\n    removeEntry(state, action) {\r\n      const entryIndex = state.entries.findIndex((entry) => {\r\n        if (\r\n          (entry.id === action.payload.id) && \r\n          (entry.type === action.payload.type) && \r\n          (entry.size === action.payload.size)\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n\r\n      if (entryIndex !== -1) {\r\n        if (state.entries[entryIndex].count === 1) {\r\n          state.entries.splice(entryIndex, 1);\r\n        } else {\r\n          state.entries[entryIndex].count -= 1;\r\n        }\r\n        state.entriesCount -= 1;\r\n        if (state.entriesCount) {\r\n          state.entriesPrice -= action.payload.price;\r\n        } else {\r\n          state.entriesPrice = 0;\r\n        };\r\n      }\r\n    },\r\n\r\n\r\n    // Action for remove all of entries with given configuration\r\n    // from the entries state.\r\n    // Action payload must contain the entry object (see signature upper).\r\n    // The entry object must contain the id, type, size and price properties.\r\n    // Other properties are optional.\r\n\r\n    removeAllEntries(state, action) {\r\n      const entryIndex = state.entries.findIndex((entry) => {\r\n        if (\r\n          (entry.id === action.payload.id) && \r\n          (entry.type === action.payload.type) && \r\n          (entry.size === action.payload.size)\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      \r\n      if (entryIndex !== -1) {\r\n        const entryCount = state.entries[entryIndex].count;\r\n        const entryPrice = state.entries[entryIndex].price;\r\n        \r\n        state.entries.splice(entryIndex, 1);\r\n        \r\n        state.entriesCount -= entryCount;\r\n        if (state.entriesCount) {\r\n          state.entriesPrice -= (entryCount * entryPrice);\r\n        } else {\r\n          state.entriesPrice = 0;\r\n        };\r\n      }\r\n    },\r\n\r\n    clearCart(state) {\r\n      state.entries = [];\r\n      state.entriesCount = 0;\r\n      state.entriesPrice = 0;\r\n    }\r\n  }\r\n})\r\n  \r\nexport const {\r\n  addEntry,\r\n  removeEntry,\r\n  removeAllEntries,\r\n  clearCart\r\n} = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;","export default __webpack_public_path__ + \"static/media/dark-cart.dcd51680.svg\";","export default __webpack_public_path__ + \"static/media/trash.ceafcffb.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button, CartItem } from '../';\r\nimport { clearCart } from '../../redux/slices/cart';\r\n\r\nimport cartSvg from '../../assets/images/svg/dark-cart.svg';\r\nimport trashSvg from '../../assets/images/svg/trash.svg';\r\n\r\nimport '../../styles/scss/components/cart/Cart.scss';\r\n\r\n\r\n// Component for cart entries representation.\r\n// Should be used if cart is not empty.\r\n// Every entry rendered as CartItem component.\r\n//\r\n// All props comes from Redux storage (cart slice).\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// entries: array of entry objects. Can be empty, \r\n//   in that case none of CartItems will be rendered.\r\n//   Entry object signature: {\r\n//     id: integer > 0 - identificator of product in Redux storage,\r\n//     imageUrl: string or undefined - path to the item image,\r\n//     label: string - product name,\r\n//     type: integer >= 0 - index of product type in Redux storage,\r\n//     size: integer >= 0 - index of product size in Redux storage,\r\n//     count: integer > 0 - number of same products in the cart\r\n// }\r\n// entriesPrice: number >= 0.0 - summary price of all products in the cart.\r\n// entriesCount: integer >= 0 - total count of all products in the cart.\r\n// clear: function() to remove all cart entries.\r\n\r\nfunction Cart({ entries, entriesPrice, entriesCount, clear }) {\r\n  return (\r\n    <div className='Cart'>\r\n\r\n      <div className='Cart__header interactive-bar'>\r\n\r\n        <div className='Cart__section-label'>\r\n          <div className='Cart__section-label-icon-container'>\r\n            <img className='image' src={cartSvg} alt='cart' />\r\n          </div>\r\n          <h1 className='Cart__section-label-text section-label'>Cart</h1>\r\n        </div>\r\n\r\n        <Button className='Cart__clear-button' theme='weak' onClick={clear}>\r\n          <div className='Cart__clear-button-icon-container'>\r\n            <img className='image' src={trashSvg} alt='trash' />\r\n          </div>\r\n          <p className='Cart__clear-button-text'>Clear cart</p>\r\n        </Button>\r\n\r\n      </div>\r\n\r\n      <div className='Cart__items'>\r\n        {\r\n          entries.map((entry) => {\r\n            return (\r\n              <CartItem entry={entry} />\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div className='Cart__footer'>\r\n        <div className='Cart__counter'>\r\n          <span className='Cart__counter-text'>Total entries: </span>\r\n          <span className='Cart__counter-state'>{ entriesCount } pcs.</span>\r\n        </div>\r\n        <div className='Cart__price'>\r\n          <span className='Cart__price-text'>Order price: </span>\r\n          <span className='Cart__price-state'>\r\n            { entriesPrice.toFixed(2) } $\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <nav className='Cart__navigation interactive-bar'>\r\n        <Link to='/react-pizza/'>\r\n          <Button\r\n            className='Cart__back-button'\r\n            shape='rounded'\r\n            theme='weak-bordered'\r\n            children='Back'\r\n          />\r\n        </Link>\r\n        <Button\r\n          className='Cart__pay-button'\r\n          shape='rounded'\r\n          theme='main-colored'\r\n          children='Pay now'\r\n        />\r\n      </nav>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nCart.propTypes = {\r\n  entries: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  entriesPrice: PropTypes.number.isRequired,\r\n  entriesCount: PropTypes.number.isRequired,\r\n  clear: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    entries: state.cart.entries,\r\n    entriesPrice: state.cart.entriesPrice,\r\n    entriesCount: state.cart.entriesCount\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      clear: () => {\r\n        dispatch(clearCart());\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","export default __webpack_public_path__ + \"static/media/empty-cart.db905d1f.png\";","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Button } from '../';\r\n\r\nimport imagePng from '../../assets/images/png/empty-cart.png';\r\n\r\nimport '../../styles/scss/components/cart/EmptyCart.scss';\r\n\r\n\r\n// Component for static representation of an empty cart.\r\n// Should be used if cart is empty.\r\n// No props required.\r\n\r\nfunction EmptyCart() {\r\n  return (\r\n    <div className='Empty-cart'>\r\n      <h1 className='Empty-cart__section-label section-label'>\r\n        Your cart is empty 😕\r\n      </h1>\r\n      <p className='Empty-cart__text'>\r\n        Most likely you haven't ordered pizza yet. <br/>\r\n        To order pizza, go to the main page.\r\n      </p>\r\n      <div className='Empty-cart__image-container'>\r\n        <img className='image' src={imagePng} alt='empty cart' />\r\n      </div>\r\n      <Link to='/'>\r\n        <Button\r\n          className='Empty-cart__back-button' \r\n          shape='rounded'\r\n          theme='dark-colored'\r\n          children='Back'\r\n        />\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmptyCart;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button } from '../';\r\nimport {\r\n  addEntry,\r\n  removeEntry,\r\n  removeAllEntries\r\n} from '../../redux/slices/cart';\r\n\r\nimport '../../styles/scss/components/cart/CartItem.scss';\r\n\r\n\r\n// Component for cart entry representation.\r\n//\r\n// Need direct determination of \"entry\" prop.\r\n// All other props comes from Redux storage, \r\n// direct determination of them isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// entry: object. Signature: {\r\n//   id: integer > 0 - identificator of product in Redux storage,\r\n//   imageUrl: string or undefined - path to the item image\r\n//     (if undefined will be used the default image),\r\n//   label: string - product name,\r\n//   type: integer >= 0 - index of product type in Redux storage,\r\n//   size: integer >= 0 - index of product size in Redux storage,\r\n//   count: integer > 0 - number of same products in the cart\r\n// }\r\n// availableTypes: array of strings (availableTypes.length > 0) -\r\n//   available product types from Redux storage.\r\n// availableSizes: array of numbers (availableSizes.length > 0) -\r\n//   available product sizes from Redux storage.\r\n// add: function(entry) to add one more entry (of rendered by that component)\r\n//   into the cart.\r\n// remove: function(entry) to remove one entry (of rendered by that component)\r\n//   from the cart. If there is no more of rendered entry in the cart, \r\n//   this CartItem component should be removed too.\r\n// removeAll: function(entry) to remove all entries (of rendered by that\r\n//   component) from the cart. As a result, an empty CartItem component \r\n//   should also be removed.\r\n\r\nfunction CartItem(\r\n    { entry, availableTypes, availableSizes, add, remove, removeAll }\r\n  ) {\r\n\r\n  return (\r\n    <div className='Cart__item Cart-item'>\r\n\r\n      <div className='Cart-item__info'>\r\n        <div className='Cart-item__image-container'>\r\n          <img className='image' src={entry.imageUrl} alt='pizza' />\r\n        </div>\r\n        <div className='Cart-item__text'>\r\n          <h3 className='Cart-item__label'>{ entry.label }</h3>\r\n          <p className='Cart-item__description'>\r\n            <span>{ availableTypes[entry.type] } dough, </span>\r\n            <span>{ availableSizes[entry.size] } cm.</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='Cart-item__interactive-bar'>\r\n        <div className='Cart-item__counter'>\r\n          <Button \r\n            className='Cart-item__counter-button'\r\n            theme='main-bordered'\r\n            onClick={() => remove(entry)}\r\n            children='-'\r\n          />\r\n          <p className='Cart-item__counter-state'>{ entry.count }</p>\r\n          <Button\r\n            className='Cart-item__counter-button'\r\n            theme='main-bordered'\r\n            onClick={() => add(entry)}\r\n            children='+'\r\n          />\r\n        </div>\r\n\r\n        <div className='Cart-item__price'>\r\n          { (entry.price * entry.count).toFixed(2) } $\r\n        </div>\r\n        <Button\r\n          className='Cart-item__clear-button'\r\n          theme='weak-bordered'\r\n          onClick={() => removeAll(entry)}\r\n          children='×'\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCartItem.defaultProps = {\r\n  imageUrl: './images/default-pizza-image.svg',\r\n};\r\n\r\nCartItem.propTypes = {\r\n  entry: PropTypes.object.isRequired,\r\n  availableTypes: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  availableSizes: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\r\n  add: PropTypes.func.isRequired,\r\n  remove: PropTypes.func.isRequired,\r\n  removeAll: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    availableTypes: state.filters.productTypes,\r\n    availableSizes: state.filters.productSizes,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    add: (entry) => {\r\n      dispatch(addEntry({...entry}));\r\n    },\r\n    remove: (entry) => {\r\n      dispatch(removeEntry({...entry}));\r\n    },\r\n    removeAll: (entry) => {\r\n      dispatch(removeAllEntries({...entry}));\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CartItem);\r\n","export default __webpack_public_path__ + \"static/media/arrow-top.8a732a72.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport markerSvg from '../../assets/images/svg/arrow-top.svg';\r\n\r\nimport '../../styles/scss/components/menus/PopupMenu.scss';\r\n\r\n\r\n// Basic component for popup menus representation.\r\n// Can be clarified by specifying different props.\r\n// General way to clarify a PopupMenu is using a top level components\r\n// like SortMenu or CategoriesMenu.\r\n//\r\n// Component has no connection to Redux storage and \r\n// need direct determination of all his props.\r\n//\r\n// Component props:\r\n//\r\n// className: string or undefined - name of optional css class \r\n//   for rendered PopupMenu.\r\n// inviteText: string or undefined - text that will be shown near\r\n//   an active menu option. Default value is \"Option\".\r\n// options: array of strings - options to display in the menu.\r\n// activeOption: integer >=0 - index of options array.\r\n// setActiveOption: function(optionIndex) - changes the activeOption\r\n//   stored outside.\r\n// processingFunction: function(), which will run every time it changes.\r\n//   processingFunction is an instrument to make changes outside the component.\r\n\r\nfunction PopupMenu({\r\n  className,\r\n  inviteText,\r\n  options,\r\n  activeOption,\r\n  setActiveOption,\r\n  processingFunction\r\n}) {\r\n\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const elementRef = React.useRef();\r\n\r\n  const toggleIsOpen = () => setIsOpen(!isOpen);\r\n\r\n  const onSelectOption = (optionIndex) => {\r\n    if (optionIndex !== activeOption) setActiveOption(optionIndex);\r\n    if (isOpen) toggleIsOpen();\r\n  }\r\n\r\n  const handleOutsideClick = (event) => {\r\n    if (!event.path.includes(elementRef.current)) setIsOpen(false);\r\n  }\r\n\r\n  // The menu will close itself because of click outside his area\r\n  React.useEffect(() => {\r\n    document.body.addEventListener('click', handleOutsideClick);\r\n    return () => {\r\n      document.body.removeEventListener('click', handleOutsideClick)\r\n    };\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    processingFunction();\r\n  }, [processingFunction]);\r\n\r\n\r\n  return (\r\n    <div\r\n      ref={elementRef}\r\n      className={classNames('Popup-menu', className)}\r\n    >\r\n\r\n      <div\r\n        className={classNames(\r\n          'Popup-menu__marker',\r\n          {[`${className}__popup-marker`]: className,\r\n          'Popup-menu__marker_closed': !isOpen}\r\n        )}\r\n      >\r\n        <img className='image' src={markerSvg} alt='marker' />\r\n      </div>\r\n\r\n      <p\r\n        className={classNames(\r\n          'Popup-menu__invite-text',\r\n          {[`${className}__popup-invite-text`]: className}\r\n        )}\r\n      >\r\n        { inviteText }:\r\n        <span\r\n          onClick={toggleIsOpen}\r\n          className={classNames(\r\n            'Popup-menu__selected',\r\n            {[`${className}__popup-selected`]: className}\r\n          )}\r\n        >\r\n          { options[activeOption] }\r\n        </span>\r\n      </p>\r\n\r\n      <ul\r\n        className={classNames(\r\n          'Popup-menu__items',\r\n          {[`${className}__items`]: className,\r\n          'Popup-menu__items_active': isOpen}\r\n        )}\r\n      >\r\n\r\n        { options.map((option, index) => (\r\n          <li\r\n            key={`${option}_${index}`}\r\n            onClick={ () => onSelectOption(index) }\r\n            className={classNames(\r\n              'Popup-menu__item',\r\n              {[`${className}__item`]: className,\r\n              'Popup-menu__item_active': index === activeOption,\r\n              [`${className}__item_active`]: index === activeOption}\r\n            )}\r\n          >\r\n            { option }\r\n          </li>\r\n        )) }\r\n\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nPopupMenu.defaultProps = {\r\n  inviteText: 'Option',\r\n};\r\n\r\nPopupMenu.propTypes = {\r\n  className: PropTypes.string,\r\n  inviteText: PropTypes.string,\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n};\r\n\r\nexport default PopupMenu;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { PopupMenu } from '../';\r\nimport {\r\n  setShownProducts,\r\n  setActiveCategory\r\n} from '../../redux/slices/filters';\r\n\r\nimport '../../styles/scss/components/menus/CategoriesMenu.scss';\r\n\r\n\r\n// The CategoriesMenu component is a refinement of the PopupMenu component\r\n// for setting shownProducts (in Redux) by them category.\r\n//\r\n// All props comes from Redux storage.\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// options: array of strings. Options prop for PopupMenu component.\r\n//   In case of CotegoriesMenu, options are product categories.\r\n// activeOption: integer >= 0. Index of the options.\r\n// setActiveOption: function(optionIndex).\r\n// products: array of product objects (see filters Redux slice).\r\n// isProductsLoaded: boolean. Logical flag indicating whether data\r\n//   has been loaded from the server or not.\r\n// display: function(idArray). Function to set shownProducts state of\r\n//   Redux filters store. The idArray is an array of products\r\n//   identificators.\r\n\r\nfunction CategoriesMenu({\r\n  options,\r\n  activeOption,\r\n  products,\r\n  isProductsLoaded,\r\n  setActiveOption,\r\n  display\r\n}) {\r\n\r\n  const processingFunction = () => {\r\n    if (!isProductsLoaded) return;\r\n    const filteredProsucts = products.filter((product) => {\r\n      return product.categories.includes(activeOption);\r\n    });\r\n    const idArray = filteredProsucts.map((product) => product.id);\r\n    display(idArray);\r\n  }\r\n\r\n  return (\r\n    <PopupMenu\r\n      className='Categories-menu'\r\n      inviteText='Category'\r\n      options={options}\r\n      activeOption={activeOption}\r\n      setActiveOption={setActiveOption}\r\n      processingFunction={processingFunction}\r\n    />\r\n  )\r\n}\r\n\r\nCategoriesMenu.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  activeOption: PropTypes.number.isRequired,\r\n  products: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  isProductsLoaded: PropTypes.bool.isRequired,\r\n  setActiveOption: PropTypes.func.isRequired,\r\n  display: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    options: state.filters.productCategories,\r\n    activeOption: state.filters.activeCategory,\r\n    products: state.filters.products,\r\n    isProductsLoaded: state.filters.isProductsLoaded,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setActiveOption: (optionIndex) => dispatch(setActiveCategory(optionIndex)),\r\n    display: (idArray) => dispatch(setShownProducts(idArray))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoriesMenu);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { PopupMenu } from '../';\r\nimport {\r\n  setActiveSortOption,\r\n  sortShownProducts\r\n} from '../../redux/slices/filters';\r\n\r\n\r\n// The SortMenu component is a refinement of the PopupMenu component\r\n// for sorting shownProducts (in Redux).\r\n//\r\n// All props comes from Redux storage.\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// options: array of strings. Options prop for PopupMenu component.\r\n//   In case of SortMenu, options are product sort options.\r\n// activeOption: integer >= 0. Index of the options.\r\n// setActiveOption: function(optionIndex).\r\n// isProductsLoaded: boolean. Logical flag indicating whether data\r\n//   has been loaded from the server or not.\r\n// isShownProductsSorted: boolean. Logical flag indicating whether data\r\n//   has been already sorted or not.\r\n// sort: function() Function to sort shownProducts state of\r\n//   Redux filters store by activeSortOption state.\r\n\r\nfunction SortMenu({\r\n  options,\r\n  activeOption,\r\n  isProductsLoaded,\r\n  isShownProductsSorted,\r\n  setActiveOption,\r\n  sort\r\n}) {\r\n\r\n  const processingFunction = () => {\r\n    if (isProductsLoaded && (!isShownProductsSorted)) sort();\r\n  }\r\n\r\n  return (\r\n    <PopupMenu \r\n      className='Sort-menu'\r\n      inviteText='Sort by'\r\n      options={options}\r\n      activeOption={activeOption}\r\n      setActiveOption={setActiveOption}\r\n      processingFunction={processingFunction}\r\n    />\r\n  )\r\n}\r\n\r\nSortMenu.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  activeOption: PropTypes.number.isRequired,\r\n  isProductsLoaded: PropTypes.bool.isRequired,\r\n  isShownProductsSorted: PropTypes.bool.isRequired,\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    options: state.filters.sortOptions,\r\n    activeOption: state.filters.activeSortOption,\r\n    isProductsLoaded: state.filters.isProductsLoaded,\r\n    isShownProductsSorted: state.filters.isShownProductsSorted,\r\n    setActiveOption: PropTypes.func.isRequired,\r\n    sort: PropTypes.func.isRequired,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setActiveOption: (optionIndex) => {\r\n      dispatch(setActiveSortOption(optionIndex));\r\n    },\r\n    sort: () => {\r\n      dispatch(sortShownProducts());\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortMenu);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Pizza } from '../';\r\n\r\nimport '../../styles/scss/components/pizzas/PizzaGallery.scss';\r\n\r\n\r\n// Component for pizzas representation.\r\n// Only shown items will be rendered. Shown items stores in Redax\r\n// as a separate array (see props).\r\n// The recommended way to change the displayed items is\r\n// to use the CategoriesMenu component.\r\n// Every pizza rendered as Pizza component.\r\n//\r\n// All props comes from Redux storage.\r\n// Direct determination of component's props isn't necessary.\r\n//\r\n// Component props:\r\n// \r\n// items: array of objects - list of the products from the Redux store.\r\n//   Contains all pizzas loaded from the server.\r\n//   See Pizza component for pizza object signature.\r\n// shown: array of integers >= 0 - list of products identificators.\r\n//   PizzaGallery will render only pizzas\r\n//   whose id's are stored in the shown array.\r\n\r\nfunction PizzaGallery( { items, shown } ) {\r\n  return (\r\n    <div className='Pizza-gallery'>\r\n      {\r\n        shown.map((id) => {\r\n          const item = items.find(item => item.id === id);\r\n          return (\r\n            <Pizza\r\n              key={id}\r\n              pizzaItem={item}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nPizzaGallery.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.object),\r\n  shown: PropTypes.arrayOf(PropTypes.number)\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.filters.products,\r\n    shown: state.filters.shownProducts\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PizzaGallery);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport classNames from 'classnames';\r\n\r\nimport { Button } from '../';\r\nimport { addEntry } from '../../redux/slices/cart';\r\n\r\nimport '../../styles/scss/components/pizzas/Pizza.scss';\r\n\r\n\r\n// Component for single product representation.\r\n// Will be mounted into PizzaGallery component.\r\n//\r\n// Need direct determination of \"pizzaItem\" prop.\r\n// All other props comes from Redux storage, \r\n// direct determination of them isn't necessary.\r\n//\r\n// Component props:\r\n//\r\n// pizzaItem: object. Signature: {\r\n//   availableTypes: non empty array of integers >= 0 - contain indexes of\r\n//     avaiable types for a specific product.\r\n//     All types of products are listed in Redux.\r\n//   availableSizes: non empty array of integers >= 0 - contain indexes of\r\n//     avaiable sizes for a specific product.\r\n//     All sizes of products are listed in Redux.\r\n//   imageUrl: string or undefined - path to the product image. If undefined,\r\n//     will be replaced by default value.\r\n//   pizzaLabel: string - product name.\r\n//   prices: array of arrays of numbers - the matrix of prices for \r\n//     any product configuration (price = prices[type][size]).\r\n// }\r\n// types: non empty array of strings - all product types from Redux.\r\n// sizes: non empty array of numbers - all product sizes from Redux.\r\n// cartEntries: array of objects representing cart entries.\r\n//   Entry signature: {\r\n//     id: integer > 0 - product identificator.\r\n//     imageUrl: string or undefined - path to the product image.\r\n//     label: string - product name.\r\n//     type: integer > 0 - index of types array of Redux store (pizzas slice).\r\n//     size: integer > 0 - index of sizes array of Redux store (pizzas slice).\r\n//     price: number > 0 - product price for selected configuration.\r\n//     count: integer > 0 - number of products the with same configuration\r\n//       in the cart.\r\n//   }\r\n// addToCart: function(id, imageUrl, label, type, size, price)\r\n//   where arguments are an entry properties (see signature upper).\r\n//   Addes entry to cart. Сount property will allways be 1.\r\n\r\nfunction Pizza({ pizzaItem, types, sizes, cartEntries, addToCart }) {\r\n\r\n  // pizzaItem variables\r\n  const availableTypes = pizzaItem.availableTypes;\r\n  const availableSizes = pizzaItem.availableSizes;\r\n  const imageUrl = (\r\n    pizzaItem.imageUrl ? pizzaItem.imageUrl: (\r\n      '../../assect/images/svg/default-pizza-image.svg'\r\n  ));\r\n  const pizzaLabel = pizzaItem.pizzaLabel;\r\n  const prices = pizzaItem.prices;\r\n\r\n  // states\r\n  const [activeType, setActiveType] = React.useState(availableTypes[0]);\r\n  const [activeSize, setActiveSize] = React.useState(availableSizes[0]);\r\n  const [orderCounter, setOrderCounter] = React.useState(0);\r\n\r\n  const onSelectType = (index) => setActiveType(index);\r\n  const onSelectSize = (index) => setActiveSize(index);\r\n\r\n  // order button counter rendering effect\r\n  React.useEffect(() => {\r\n    const getOrderCount = () => {\r\n      for (const entry of cartEntries) {\r\n        if (\r\n          (entry.id === pizzaItem.id) &&\r\n          (entry.type === activeType) &&\r\n          (entry.size === activeSize)\r\n        ) {\r\n          return entry.count;\r\n        }\r\n      };\r\n      return 0;\r\n    }\r\n    setOrderCounter(getOrderCount());\r\n  }, [\r\n    cartEntries,\r\n    activeType,\r\n    activeSize,\r\n    availableTypes,\r\n    availableSizes,\r\n    pizzaItem.id\r\n  ]);\r\n\r\n  return (\r\n    <div className='Pizza'>\r\n      <div className='Pizza__image-container'>\r\n        <img className='image' src={imageUrl} alt='pizza' />\r\n      </div>\r\n\r\n      <h2 className='Pizza__label'> {pizzaLabel} </h2>\r\n        \r\n      <div className='Pizza__options'>\r\n        <ul className='Pizza__options-row'>\r\n          { types.map((item, index) => (\r\n            <li\r\n              key={ `${item}_${index}` }\r\n              onClick={ () => onSelectType(index) }\r\n              className={classNames(\r\n                'Pizza__options-item',\r\n                {'Pizza__options-item_active': (index === activeType),\r\n                'Pizza__options-item_unavailable': (\r\n                  !availableTypes.includes(index))}\r\n              )}\r\n            >\r\n              { item }\r\n            </li>\r\n          )) }\r\n        </ul>\r\n\r\n        <ul className='Pizza__options-row'>\r\n          { sizes.map((item, index) => (\r\n            <li\r\n              key={ `${item}_${index}` }\r\n              onClick={ () => onSelectSize(index) }\r\n              className={classNames(\r\n                'Pizza__options-item',\r\n                {'Pizza__options-item_active': (index === activeSize),\r\n                'Pizza__options-item_unavailable': (\r\n                  !availableSizes.includes(index))}\r\n              )}\r\n            >\r\n              { item } cm.\r\n            </li>\r\n          )) }\r\n        </ul>\r\n      </div>\r\n\r\n      <div className='Pizza__order-bar interactive-bar'>\r\n        <div className='Pizza__price'>\r\n          { prices[activeType][activeSize] } $\r\n        </div>\r\n\r\n        <Button\r\n          className='Pizza__order-button'\r\n          shape='rounded'\r\n          theme='main-bordered'\r\n          onClick={ () => addToCart(\r\n            pizzaItem.id,\r\n            imageUrl,\r\n            pizzaLabel,\r\n            activeType,\r\n            activeSize,\r\n            prices[activeType][activeSize]\r\n          )}\r\n        >\r\n          <p className=\"Pizza__order-button-text\">+ Add</p>\r\n          <div\r\n            className={classNames(\r\n              'Pizza__order-button-counter',\r\n              {'Pizza__order-button-counter_active': orderCounter}\r\n            )}\r\n          >\r\n            { orderCounter }\r\n          </div>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nPizza.propTypes = {\r\n  pizzaItem: PropTypes.object.isRequired,\r\n  types: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  sizes: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\r\n  cartEntries: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  addToCart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    types: state.filters.productTypes,\r\n    sizes: state.filters.productSizes,\r\n    cartEntries: state.cart.entries,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToCart: (id, imageUrl, label, type, size, price) => {\r\n      dispatch( addEntry( {\r\n        id: id,\r\n        imageUrl: imageUrl,\r\n        label: label,\r\n        type: type,\r\n        size: size,\r\n        price: price,\r\n        count: 1\r\n      } ) );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pizza);","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport filtersReducer from './slices/filters';\r\nimport cartReducer from './slices/cart';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    filters: filtersReducer,\r\n    cart: cartReducer\r\n  }\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './components';\n\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}